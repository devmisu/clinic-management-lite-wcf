//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebPatient.ProxyMedicalRecords {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MedicalRecordBE", Namespace="http://schemas.datacontract.org/2004/07/WCFClinic.Entities")]
    [System.SerializableAttribute()]
    public partial class MedicalRecordBE : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AllergiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DiseasesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short IdAppointmentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MedicinesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReasonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurgeriesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Allergies {
            get {
                return this.AllergiesField;
            }
            set {
                if ((object.ReferenceEquals(this.AllergiesField, value) != true)) {
                    this.AllergiesField = value;
                    this.RaisePropertyChanged("Allergies");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedAt {
            get {
                return this.CreatedAtField;
            }
            set {
                if ((this.CreatedAtField.Equals(value) != true)) {
                    this.CreatedAtField = value;
                    this.RaisePropertyChanged("CreatedAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Diseases {
            get {
                return this.DiseasesField;
            }
            set {
                if ((object.ReferenceEquals(this.DiseasesField, value) != true)) {
                    this.DiseasesField = value;
                    this.RaisePropertyChanged("Diseases");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short IdAppointment {
            get {
                return this.IdAppointmentField;
            }
            set {
                if ((this.IdAppointmentField.Equals(value) != true)) {
                    this.IdAppointmentField = value;
                    this.RaisePropertyChanged("IdAppointment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Medicines {
            get {
                return this.MedicinesField;
            }
            set {
                if ((object.ReferenceEquals(this.MedicinesField, value) != true)) {
                    this.MedicinesField = value;
                    this.RaisePropertyChanged("Medicines");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Prescription {
            get {
                return this.PrescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.PrescriptionField, value) != true)) {
                    this.PrescriptionField = value;
                    this.RaisePropertyChanged("Prescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reason {
            get {
                return this.ReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.ReasonField, value) != true)) {
                    this.ReasonField = value;
                    this.RaisePropertyChanged("Reason");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surgeries {
            get {
                return this.SurgeriesField;
            }
            set {
                if ((object.ReferenceEquals(this.SurgeriesField, value) != true)) {
                    this.SurgeriesField = value;
                    this.RaisePropertyChanged("Surgeries");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProxyMedicalRecords.IServiceMedicalRecord")]
    public interface IServiceMedicalRecord {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMedicalRecord/CreateMedicalRecord", ReplyAction="http://tempuri.org/IServiceMedicalRecord/CreateMedicalRecordResponse")]
        bool CreateMedicalRecord(WebPatient.ProxyMedicalRecords.MedicalRecordBE objMedicalRecordBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMedicalRecord/CreateMedicalRecord", ReplyAction="http://tempuri.org/IServiceMedicalRecord/CreateMedicalRecordResponse")]
        System.Threading.Tasks.Task<bool> CreateMedicalRecordAsync(WebPatient.ProxyMedicalRecords.MedicalRecordBE objMedicalRecordBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMedicalRecord/GetAllMedicalRecords", ReplyAction="http://tempuri.org/IServiceMedicalRecord/GetAllMedicalRecordsResponse")]
        WebPatient.ProxyMedicalRecords.MedicalRecordBE[] GetAllMedicalRecords();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMedicalRecord/GetAllMedicalRecords", ReplyAction="http://tempuri.org/IServiceMedicalRecord/GetAllMedicalRecordsResponse")]
        System.Threading.Tasks.Task<WebPatient.ProxyMedicalRecords.MedicalRecordBE[]> GetAllMedicalRecordsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMedicalRecord/GetMedicalRecord", ReplyAction="http://tempuri.org/IServiceMedicalRecord/GetMedicalRecordResponse")]
        WebPatient.ProxyMedicalRecords.MedicalRecordBE GetMedicalRecord(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMedicalRecord/GetMedicalRecord", ReplyAction="http://tempuri.org/IServiceMedicalRecord/GetMedicalRecordResponse")]
        System.Threading.Tasks.Task<WebPatient.ProxyMedicalRecords.MedicalRecordBE> GetMedicalRecordAsync(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMedicalRecord/UpdateMedicalRecord", ReplyAction="http://tempuri.org/IServiceMedicalRecord/UpdateMedicalRecordResponse")]
        bool UpdateMedicalRecord(WebPatient.ProxyMedicalRecords.MedicalRecordBE objMedicalRecordBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMedicalRecord/UpdateMedicalRecord", ReplyAction="http://tempuri.org/IServiceMedicalRecord/UpdateMedicalRecordResponse")]
        System.Threading.Tasks.Task<bool> UpdateMedicalRecordAsync(WebPatient.ProxyMedicalRecords.MedicalRecordBE objMedicalRecordBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMedicalRecord/DeleteMedicalRecord", ReplyAction="http://tempuri.org/IServiceMedicalRecord/DeleteMedicalRecordResponse")]
        bool DeleteMedicalRecord(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMedicalRecord/DeleteMedicalRecord", ReplyAction="http://tempuri.org/IServiceMedicalRecord/DeleteMedicalRecordResponse")]
        System.Threading.Tasks.Task<bool> DeleteMedicalRecordAsync(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMedicalRecord/GetPatientMedicalRecords", ReplyAction="http://tempuri.org/IServiceMedicalRecord/GetPatientMedicalRecordsResponse")]
        WebPatient.ProxyMedicalRecords.MedicalRecordBE[] GetPatientMedicalRecords(short patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMedicalRecord/GetPatientMedicalRecords", ReplyAction="http://tempuri.org/IServiceMedicalRecord/GetPatientMedicalRecordsResponse")]
        System.Threading.Tasks.Task<WebPatient.ProxyMedicalRecords.MedicalRecordBE[]> GetPatientMedicalRecordsAsync(short patientId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceMedicalRecordChannel : WebPatient.ProxyMedicalRecords.IServiceMedicalRecord, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceMedicalRecordClient : System.ServiceModel.ClientBase<WebPatient.ProxyMedicalRecords.IServiceMedicalRecord>, WebPatient.ProxyMedicalRecords.IServiceMedicalRecord {
        
        public ServiceMedicalRecordClient() {
        }
        
        public ServiceMedicalRecordClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceMedicalRecordClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceMedicalRecordClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceMedicalRecordClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CreateMedicalRecord(WebPatient.ProxyMedicalRecords.MedicalRecordBE objMedicalRecordBE) {
            return base.Channel.CreateMedicalRecord(objMedicalRecordBE);
        }
        
        public System.Threading.Tasks.Task<bool> CreateMedicalRecordAsync(WebPatient.ProxyMedicalRecords.MedicalRecordBE objMedicalRecordBE) {
            return base.Channel.CreateMedicalRecordAsync(objMedicalRecordBE);
        }
        
        public WebPatient.ProxyMedicalRecords.MedicalRecordBE[] GetAllMedicalRecords() {
            return base.Channel.GetAllMedicalRecords();
        }
        
        public System.Threading.Tasks.Task<WebPatient.ProxyMedicalRecords.MedicalRecordBE[]> GetAllMedicalRecordsAsync() {
            return base.Channel.GetAllMedicalRecordsAsync();
        }
        
        public WebPatient.ProxyMedicalRecords.MedicalRecordBE GetMedicalRecord(short id) {
            return base.Channel.GetMedicalRecord(id);
        }
        
        public System.Threading.Tasks.Task<WebPatient.ProxyMedicalRecords.MedicalRecordBE> GetMedicalRecordAsync(short id) {
            return base.Channel.GetMedicalRecordAsync(id);
        }
        
        public bool UpdateMedicalRecord(WebPatient.ProxyMedicalRecords.MedicalRecordBE objMedicalRecordBE) {
            return base.Channel.UpdateMedicalRecord(objMedicalRecordBE);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateMedicalRecordAsync(WebPatient.ProxyMedicalRecords.MedicalRecordBE objMedicalRecordBE) {
            return base.Channel.UpdateMedicalRecordAsync(objMedicalRecordBE);
        }
        
        public bool DeleteMedicalRecord(short id) {
            return base.Channel.DeleteMedicalRecord(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMedicalRecordAsync(short id) {
            return base.Channel.DeleteMedicalRecordAsync(id);
        }
        
        public WebPatient.ProxyMedicalRecords.MedicalRecordBE[] GetPatientMedicalRecords(short patientId) {
            return base.Channel.GetPatientMedicalRecords(patientId);
        }
        
        public System.Threading.Tasks.Task<WebPatient.ProxyMedicalRecords.MedicalRecordBE[]> GetPatientMedicalRecordsAsync(short patientId) {
            return base.Channel.GetPatientMedicalRecordsAsync(patientId);
        }
    }
}
