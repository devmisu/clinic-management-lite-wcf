//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebPatient.ProxyQueue {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueueBE", Namespace="http://schemas.datacontract.org/2004/07/WCFClinic.Entities")]
    [System.SerializableAttribute()]
    public partial class QueueBE : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short IdPatientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short IdUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan StartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedAt {
            get {
                return this.CreatedAtField;
            }
            set {
                if ((this.CreatedAtField.Equals(value) != true)) {
                    this.CreatedAtField = value;
                    this.RaisePropertyChanged("CreatedAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short IdPatient {
            get {
                return this.IdPatientField;
            }
            set {
                if ((this.IdPatientField.Equals(value) != true)) {
                    this.IdPatientField = value;
                    this.RaisePropertyChanged("IdPatient");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short IdUser {
            get {
                return this.IdUserField;
            }
            set {
                if ((this.IdUserField.Equals(value) != true)) {
                    this.IdUserField = value;
                    this.RaisePropertyChanged("IdUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProxyQueue.IServiceQueue")]
    public interface IServiceQueue {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceQueue/CreateQueue", ReplyAction="http://tempuri.org/IServiceQueue/CreateQueueResponse")]
        bool CreateQueue(WebPatient.ProxyQueue.QueueBE objQueueBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceQueue/CreateQueue", ReplyAction="http://tempuri.org/IServiceQueue/CreateQueueResponse")]
        System.Threading.Tasks.Task<bool> CreateQueueAsync(WebPatient.ProxyQueue.QueueBE objQueueBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceQueue/GetAllQueues", ReplyAction="http://tempuri.org/IServiceQueue/GetAllQueuesResponse")]
        WebPatient.ProxyQueue.QueueBE[] GetAllQueues();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceQueue/GetAllQueues", ReplyAction="http://tempuri.org/IServiceQueue/GetAllQueuesResponse")]
        System.Threading.Tasks.Task<WebPatient.ProxyQueue.QueueBE[]> GetAllQueuesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceQueue/GetOneQueue", ReplyAction="http://tempuri.org/IServiceQueue/GetOneQueueResponse")]
        WebPatient.ProxyQueue.QueueBE GetOneQueue(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceQueue/GetOneQueue", ReplyAction="http://tempuri.org/IServiceQueue/GetOneQueueResponse")]
        System.Threading.Tasks.Task<WebPatient.ProxyQueue.QueueBE> GetOneQueueAsync(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceQueue/UpdateQueue", ReplyAction="http://tempuri.org/IServiceQueue/UpdateQueueResponse")]
        bool UpdateQueue(WebPatient.ProxyQueue.QueueBE objQueueBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceQueue/UpdateQueue", ReplyAction="http://tempuri.org/IServiceQueue/UpdateQueueResponse")]
        System.Threading.Tasks.Task<bool> UpdateQueueAsync(WebPatient.ProxyQueue.QueueBE objQueueBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceQueue/DeleteQueue", ReplyAction="http://tempuri.org/IServiceQueue/DeleteQueueResponse")]
        bool DeleteQueue(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceQueue/DeleteQueue", ReplyAction="http://tempuri.org/IServiceQueue/DeleteQueueResponse")]
        System.Threading.Tasks.Task<bool> DeleteQueueAsync(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceQueue/GetUserQueues", ReplyAction="http://tempuri.org/IServiceQueue/GetUserQueuesResponse")]
        WebPatient.ProxyQueue.QueueBE[] GetUserQueues(short userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceQueue/GetUserQueues", ReplyAction="http://tempuri.org/IServiceQueue/GetUserQueuesResponse")]
        System.Threading.Tasks.Task<WebPatient.ProxyQueue.QueueBE[]> GetUserQueuesAsync(short userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceQueue/GetPatientQueues", ReplyAction="http://tempuri.org/IServiceQueue/GetPatientQueuesResponse")]
        WebPatient.ProxyQueue.QueueBE[] GetPatientQueues(short patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceQueue/GetPatientQueues", ReplyAction="http://tempuri.org/IServiceQueue/GetPatientQueuesResponse")]
        System.Threading.Tasks.Task<WebPatient.ProxyQueue.QueueBE[]> GetPatientQueuesAsync(short patientId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceQueueChannel : WebPatient.ProxyQueue.IServiceQueue, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceQueueClient : System.ServiceModel.ClientBase<WebPatient.ProxyQueue.IServiceQueue>, WebPatient.ProxyQueue.IServiceQueue {
        
        public ServiceQueueClient() {
        }
        
        public ServiceQueueClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceQueueClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceQueueClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceQueueClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CreateQueue(WebPatient.ProxyQueue.QueueBE objQueueBE) {
            return base.Channel.CreateQueue(objQueueBE);
        }
        
        public System.Threading.Tasks.Task<bool> CreateQueueAsync(WebPatient.ProxyQueue.QueueBE objQueueBE) {
            return base.Channel.CreateQueueAsync(objQueueBE);
        }
        
        public WebPatient.ProxyQueue.QueueBE[] GetAllQueues() {
            return base.Channel.GetAllQueues();
        }
        
        public System.Threading.Tasks.Task<WebPatient.ProxyQueue.QueueBE[]> GetAllQueuesAsync() {
            return base.Channel.GetAllQueuesAsync();
        }
        
        public WebPatient.ProxyQueue.QueueBE GetOneQueue(short id) {
            return base.Channel.GetOneQueue(id);
        }
        
        public System.Threading.Tasks.Task<WebPatient.ProxyQueue.QueueBE> GetOneQueueAsync(short id) {
            return base.Channel.GetOneQueueAsync(id);
        }
        
        public bool UpdateQueue(WebPatient.ProxyQueue.QueueBE objQueueBE) {
            return base.Channel.UpdateQueue(objQueueBE);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateQueueAsync(WebPatient.ProxyQueue.QueueBE objQueueBE) {
            return base.Channel.UpdateQueueAsync(objQueueBE);
        }
        
        public bool DeleteQueue(short id) {
            return base.Channel.DeleteQueue(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteQueueAsync(short id) {
            return base.Channel.DeleteQueueAsync(id);
        }
        
        public WebPatient.ProxyQueue.QueueBE[] GetUserQueues(short userId) {
            return base.Channel.GetUserQueues(userId);
        }
        
        public System.Threading.Tasks.Task<WebPatient.ProxyQueue.QueueBE[]> GetUserQueuesAsync(short userId) {
            return base.Channel.GetUserQueuesAsync(userId);
        }
        
        public WebPatient.ProxyQueue.QueueBE[] GetPatientQueues(short patientId) {
            return base.Channel.GetPatientQueues(patientId);
        }
        
        public System.Threading.Tasks.Task<WebPatient.ProxyQueue.QueueBE[]> GetPatientQueuesAsync(short patientId) {
            return base.Channel.GetPatientQueuesAsync(patientId);
        }
    }
}
