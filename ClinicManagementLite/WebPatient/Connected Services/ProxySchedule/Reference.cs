//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebPatient.ProxySchedule {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScheduleBE", Namespace="http://schemas.datacontract.org/2004/07/WCFClinic.Entities")]
    [System.SerializableAttribute()]
    public partial class ScheduleBE : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DaysField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan EndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short IdUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan StartTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedAt {
            get {
                return this.CreatedAtField;
            }
            set {
                if ((this.CreatedAtField.Equals(value) != true)) {
                    this.CreatedAtField = value;
                    this.RaisePropertyChanged("CreatedAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Days {
            get {
                return this.DaysField;
            }
            set {
                if ((object.ReferenceEquals(this.DaysField, value) != true)) {
                    this.DaysField = value;
                    this.RaisePropertyChanged("Days");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short IdUser {
            get {
                return this.IdUserField;
            }
            set {
                if ((this.IdUserField.Equals(value) != true)) {
                    this.IdUserField = value;
                    this.RaisePropertyChanged("IdUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProxySchedule.IServiceSchedule")]
    public interface IServiceSchedule {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSchedule/CreateSchedule", ReplyAction="http://tempuri.org/IServiceSchedule/CreateScheduleResponse")]
        bool CreateSchedule(WebPatient.ProxySchedule.ScheduleBE objScheduleBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSchedule/CreateSchedule", ReplyAction="http://tempuri.org/IServiceSchedule/CreateScheduleResponse")]
        System.Threading.Tasks.Task<bool> CreateScheduleAsync(WebPatient.ProxySchedule.ScheduleBE objScheduleBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSchedule/GetAllSchedules", ReplyAction="http://tempuri.org/IServiceSchedule/GetAllSchedulesResponse")]
        WebPatient.ProxySchedule.ScheduleBE[] GetAllSchedules();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSchedule/GetAllSchedules", ReplyAction="http://tempuri.org/IServiceSchedule/GetAllSchedulesResponse")]
        System.Threading.Tasks.Task<WebPatient.ProxySchedule.ScheduleBE[]> GetAllSchedulesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSchedule/GetOneSchedule", ReplyAction="http://tempuri.org/IServiceSchedule/GetOneScheduleResponse")]
        WebPatient.ProxySchedule.ScheduleBE GetOneSchedule(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSchedule/GetOneSchedule", ReplyAction="http://tempuri.org/IServiceSchedule/GetOneScheduleResponse")]
        System.Threading.Tasks.Task<WebPatient.ProxySchedule.ScheduleBE> GetOneScheduleAsync(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSchedule/UpdateSchedule", ReplyAction="http://tempuri.org/IServiceSchedule/UpdateScheduleResponse")]
        bool UpdateSchedule(WebPatient.ProxySchedule.ScheduleBE objScheduleBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSchedule/UpdateSchedule", ReplyAction="http://tempuri.org/IServiceSchedule/UpdateScheduleResponse")]
        System.Threading.Tasks.Task<bool> UpdateScheduleAsync(WebPatient.ProxySchedule.ScheduleBE objScheduleBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSchedule/DeleteSchedule", ReplyAction="http://tempuri.org/IServiceSchedule/DeleteScheduleResponse")]
        bool DeleteSchedule(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSchedule/DeleteSchedule", ReplyAction="http://tempuri.org/IServiceSchedule/DeleteScheduleResponse")]
        System.Threading.Tasks.Task<bool> DeleteScheduleAsync(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSchedule/GetAllSchedulesOfUser", ReplyAction="http://tempuri.org/IServiceSchedule/GetAllSchedulesOfUserResponse")]
        WebPatient.ProxySchedule.ScheduleBE[] GetAllSchedulesOfUser(short id, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSchedule/GetAllSchedulesOfUser", ReplyAction="http://tempuri.org/IServiceSchedule/GetAllSchedulesOfUserResponse")]
        System.Threading.Tasks.Task<WebPatient.ProxySchedule.ScheduleBE[]> GetAllSchedulesOfUserAsync(short id, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSchedule/GetAvailableSchedulesByUser", ReplyAction="http://tempuri.org/IServiceSchedule/GetAvailableSchedulesByUserResponse")]
        WebPatient.ProxySchedule.ScheduleBE[] GetAvailableSchedulesByUser(short userId, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSchedule/GetAvailableSchedulesByUser", ReplyAction="http://tempuri.org/IServiceSchedule/GetAvailableSchedulesByUserResponse")]
        System.Threading.Tasks.Task<WebPatient.ProxySchedule.ScheduleBE[]> GetAvailableSchedulesByUserAsync(short userId, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSchedule/GetAllSchedulesOfUserOfAllTime", ReplyAction="http://tempuri.org/IServiceSchedule/GetAllSchedulesOfUserOfAllTimeResponse")]
        WebPatient.ProxySchedule.ScheduleBE[] GetAllSchedulesOfUserOfAllTime(short userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceSchedule/GetAllSchedulesOfUserOfAllTime", ReplyAction="http://tempuri.org/IServiceSchedule/GetAllSchedulesOfUserOfAllTimeResponse")]
        System.Threading.Tasks.Task<WebPatient.ProxySchedule.ScheduleBE[]> GetAllSchedulesOfUserOfAllTimeAsync(short userId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceScheduleChannel : WebPatient.ProxySchedule.IServiceSchedule, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceScheduleClient : System.ServiceModel.ClientBase<WebPatient.ProxySchedule.IServiceSchedule>, WebPatient.ProxySchedule.IServiceSchedule {
        
        public ServiceScheduleClient() {
        }
        
        public ServiceScheduleClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceScheduleClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceScheduleClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceScheduleClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CreateSchedule(WebPatient.ProxySchedule.ScheduleBE objScheduleBE) {
            return base.Channel.CreateSchedule(objScheduleBE);
        }
        
        public System.Threading.Tasks.Task<bool> CreateScheduleAsync(WebPatient.ProxySchedule.ScheduleBE objScheduleBE) {
            return base.Channel.CreateScheduleAsync(objScheduleBE);
        }
        
        public WebPatient.ProxySchedule.ScheduleBE[] GetAllSchedules() {
            return base.Channel.GetAllSchedules();
        }
        
        public System.Threading.Tasks.Task<WebPatient.ProxySchedule.ScheduleBE[]> GetAllSchedulesAsync() {
            return base.Channel.GetAllSchedulesAsync();
        }
        
        public WebPatient.ProxySchedule.ScheduleBE GetOneSchedule(short id) {
            return base.Channel.GetOneSchedule(id);
        }
        
        public System.Threading.Tasks.Task<WebPatient.ProxySchedule.ScheduleBE> GetOneScheduleAsync(short id) {
            return base.Channel.GetOneScheduleAsync(id);
        }
        
        public bool UpdateSchedule(WebPatient.ProxySchedule.ScheduleBE objScheduleBE) {
            return base.Channel.UpdateSchedule(objScheduleBE);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateScheduleAsync(WebPatient.ProxySchedule.ScheduleBE objScheduleBE) {
            return base.Channel.UpdateScheduleAsync(objScheduleBE);
        }
        
        public bool DeleteSchedule(short id) {
            return base.Channel.DeleteSchedule(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteScheduleAsync(short id) {
            return base.Channel.DeleteScheduleAsync(id);
        }
        
        public WebPatient.ProxySchedule.ScheduleBE[] GetAllSchedulesOfUser(short id, System.DateTime date) {
            return base.Channel.GetAllSchedulesOfUser(id, date);
        }
        
        public System.Threading.Tasks.Task<WebPatient.ProxySchedule.ScheduleBE[]> GetAllSchedulesOfUserAsync(short id, System.DateTime date) {
            return base.Channel.GetAllSchedulesOfUserAsync(id, date);
        }
        
        public WebPatient.ProxySchedule.ScheduleBE[] GetAvailableSchedulesByUser(short userId, System.DateTime date) {
            return base.Channel.GetAvailableSchedulesByUser(userId, date);
        }
        
        public System.Threading.Tasks.Task<WebPatient.ProxySchedule.ScheduleBE[]> GetAvailableSchedulesByUserAsync(short userId, System.DateTime date) {
            return base.Channel.GetAvailableSchedulesByUserAsync(userId, date);
        }
        
        public WebPatient.ProxySchedule.ScheduleBE[] GetAllSchedulesOfUserOfAllTime(short userId) {
            return base.Channel.GetAllSchedulesOfUserOfAllTime(userId);
        }
        
        public System.Threading.Tasks.Task<WebPatient.ProxySchedule.ScheduleBE[]> GetAllSchedulesOfUserOfAllTimeAsync(short userId) {
            return base.Channel.GetAllSchedulesOfUserOfAllTimeAsync(userId);
        }
    }
}
