//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebClinicManagementLiteAdmin.ProxyRole {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoleBE", Namespace="http://schemas.datacontract.org/2004/07/WCFClinic.Entities")]
    [System.SerializableAttribute()]
    public partial class RoleBE : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AttributesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Attributes {
            get {
                return this.AttributesField;
            }
            set {
                if ((object.ReferenceEquals(this.AttributesField, value) != true)) {
                    this.AttributesField = value;
                    this.RaisePropertyChanged("Attributes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedAt {
            get {
                return this.CreatedAtField;
            }
            set {
                if ((this.CreatedAtField.Equals(value) != true)) {
                    this.CreatedAtField = value;
                    this.RaisePropertyChanged("CreatedAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProxyRole.IServiceRole")]
    public interface IServiceRole {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRole/CreateRole", ReplyAction="http://tempuri.org/IServiceRole/CreateRoleResponse")]
        bool CreateRole(WebClinicManagementLiteAdmin.ProxyRole.RoleBE objRoleBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRole/CreateRole", ReplyAction="http://tempuri.org/IServiceRole/CreateRoleResponse")]
        System.Threading.Tasks.Task<bool> CreateRoleAsync(WebClinicManagementLiteAdmin.ProxyRole.RoleBE objRoleBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRole/GetAllRoles", ReplyAction="http://tempuri.org/IServiceRole/GetAllRolesResponse")]
        WebClinicManagementLiteAdmin.ProxyRole.RoleBE[] GetAllRoles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRole/GetAllRoles", ReplyAction="http://tempuri.org/IServiceRole/GetAllRolesResponse")]
        System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyRole.RoleBE[]> GetAllRolesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRole/GetOneRole", ReplyAction="http://tempuri.org/IServiceRole/GetOneRoleResponse")]
        WebClinicManagementLiteAdmin.ProxyRole.RoleBE GetOneRole(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRole/GetOneRole", ReplyAction="http://tempuri.org/IServiceRole/GetOneRoleResponse")]
        System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyRole.RoleBE> GetOneRoleAsync(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRole/UpdateRole", ReplyAction="http://tempuri.org/IServiceRole/UpdateRoleResponse")]
        bool UpdateRole(WebClinicManagementLiteAdmin.ProxyRole.RoleBE objRoleBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRole/UpdateRole", ReplyAction="http://tempuri.org/IServiceRole/UpdateRoleResponse")]
        System.Threading.Tasks.Task<bool> UpdateRoleAsync(WebClinicManagementLiteAdmin.ProxyRole.RoleBE objRoleBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRole/DeleteRole", ReplyAction="http://tempuri.org/IServiceRole/DeleteRoleResponse")]
        bool DeleteRole(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceRole/DeleteRole", ReplyAction="http://tempuri.org/IServiceRole/DeleteRoleResponse")]
        System.Threading.Tasks.Task<bool> DeleteRoleAsync(short id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceRoleChannel : WebClinicManagementLiteAdmin.ProxyRole.IServiceRole, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceRoleClient : System.ServiceModel.ClientBase<WebClinicManagementLiteAdmin.ProxyRole.IServiceRole>, WebClinicManagementLiteAdmin.ProxyRole.IServiceRole {
        
        public ServiceRoleClient() {
        }
        
        public ServiceRoleClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceRoleClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceRoleClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceRoleClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CreateRole(WebClinicManagementLiteAdmin.ProxyRole.RoleBE objRoleBE) {
            return base.Channel.CreateRole(objRoleBE);
        }
        
        public System.Threading.Tasks.Task<bool> CreateRoleAsync(WebClinicManagementLiteAdmin.ProxyRole.RoleBE objRoleBE) {
            return base.Channel.CreateRoleAsync(objRoleBE);
        }
        
        public WebClinicManagementLiteAdmin.ProxyRole.RoleBE[] GetAllRoles() {
            return base.Channel.GetAllRoles();
        }
        
        public System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyRole.RoleBE[]> GetAllRolesAsync() {
            return base.Channel.GetAllRolesAsync();
        }
        
        public WebClinicManagementLiteAdmin.ProxyRole.RoleBE GetOneRole(short id) {
            return base.Channel.GetOneRole(id);
        }
        
        public System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyRole.RoleBE> GetOneRoleAsync(short id) {
            return base.Channel.GetOneRoleAsync(id);
        }
        
        public bool UpdateRole(WebClinicManagementLiteAdmin.ProxyRole.RoleBE objRoleBE) {
            return base.Channel.UpdateRole(objRoleBE);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateRoleAsync(WebClinicManagementLiteAdmin.ProxyRole.RoleBE objRoleBE) {
            return base.Channel.UpdateRoleAsync(objRoleBE);
        }
        
        public bool DeleteRole(short id) {
            return base.Channel.DeleteRole(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteRoleAsync(short id) {
            return base.Channel.DeleteRoleAsync(id);
        }
    }
}
