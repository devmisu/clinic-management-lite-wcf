//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebClinicManagementLiteAdmin.ProxyAppointment {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AppointmentBE", Namespace="http://schemas.datacontract.org/2004/07/WCFClinic.Entities")]
    [System.SerializableAttribute()]
    public partial class AppointmentBE : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.TimeSpan> ArrivalHourField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.TimeSpan> DepartureHourField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan EndHourField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short IdPatientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short IdUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan StartHourField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.TimeSpan> ArrivalHour {
            get {
                return this.ArrivalHourField;
            }
            set {
                if ((this.ArrivalHourField.Equals(value) != true)) {
                    this.ArrivalHourField = value;
                    this.RaisePropertyChanged("ArrivalHour");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedAt {
            get {
                return this.CreatedAtField;
            }
            set {
                if ((this.CreatedAtField.Equals(value) != true)) {
                    this.CreatedAtField = value;
                    this.RaisePropertyChanged("CreatedAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.TimeSpan> DepartureHour {
            get {
                return this.DepartureHourField;
            }
            set {
                if ((this.DepartureHourField.Equals(value) != true)) {
                    this.DepartureHourField = value;
                    this.RaisePropertyChanged("DepartureHour");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan EndHour {
            get {
                return this.EndHourField;
            }
            set {
                if ((this.EndHourField.Equals(value) != true)) {
                    this.EndHourField = value;
                    this.RaisePropertyChanged("EndHour");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short IdPatient {
            get {
                return this.IdPatientField;
            }
            set {
                if ((this.IdPatientField.Equals(value) != true)) {
                    this.IdPatientField = value;
                    this.RaisePropertyChanged("IdPatient");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short IdUser {
            get {
                return this.IdUserField;
            }
            set {
                if ((this.IdUserField.Equals(value) != true)) {
                    this.IdUserField = value;
                    this.RaisePropertyChanged("IdUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan StartHour {
            get {
                return this.StartHourField;
            }
            set {
                if ((this.StartHourField.Equals(value) != true)) {
                    this.StartHourField = value;
                    this.RaisePropertyChanged("StartHour");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProxyAppointment.IServiceAppointment")]
    public interface IServiceAppointment {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAppointment/CreateAppointment", ReplyAction="http://tempuri.org/IServiceAppointment/CreateAppointmentResponse")]
        bool CreateAppointment(WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE objAppointmentBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAppointment/CreateAppointment", ReplyAction="http://tempuri.org/IServiceAppointment/CreateAppointmentResponse")]
        System.Threading.Tasks.Task<bool> CreateAppointmentAsync(WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE objAppointmentBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAppointment/GetAllAppointments", ReplyAction="http://tempuri.org/IServiceAppointment/GetAllAppointmentsResponse")]
        WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE[] GetAllAppointments();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAppointment/GetAllAppointments", ReplyAction="http://tempuri.org/IServiceAppointment/GetAllAppointmentsResponse")]
        System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE[]> GetAllAppointmentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAppointment/GetOneAppointment", ReplyAction="http://tempuri.org/IServiceAppointment/GetOneAppointmentResponse")]
        WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE GetOneAppointment(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAppointment/GetOneAppointment", ReplyAction="http://tempuri.org/IServiceAppointment/GetOneAppointmentResponse")]
        System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE> GetOneAppointmentAsync(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAppointment/UpdateAppointment", ReplyAction="http://tempuri.org/IServiceAppointment/UpdateAppointmentResponse")]
        bool UpdateAppointment(WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE objAppointmentBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAppointment/UpdateAppointment", ReplyAction="http://tempuri.org/IServiceAppointment/UpdateAppointmentResponse")]
        System.Threading.Tasks.Task<bool> UpdateAppointmentAsync(WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE objAppointmentBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAppointment/DeleteAppointment", ReplyAction="http://tempuri.org/IServiceAppointment/DeleteAppointmentResponse")]
        bool DeleteAppointment(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAppointment/DeleteAppointment", ReplyAction="http://tempuri.org/IServiceAppointment/DeleteAppointmentResponse")]
        System.Threading.Tasks.Task<bool> DeleteAppointmentAsync(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAppointment/GetPatientAppointments", ReplyAction="http://tempuri.org/IServiceAppointment/GetPatientAppointmentsResponse")]
        WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE[] GetPatientAppointments(short patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAppointment/GetPatientAppointments", ReplyAction="http://tempuri.org/IServiceAppointment/GetPatientAppointmentsResponse")]
        System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE[]> GetPatientAppointmentsAsync(short patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAppointment/GetUserAppointments", ReplyAction="http://tempuri.org/IServiceAppointment/GetUserAppointmentsResponse")]
        WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE[] GetUserAppointments(short userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAppointment/GetUserAppointments", ReplyAction="http://tempuri.org/IServiceAppointment/GetUserAppointmentsResponse")]
        System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE[]> GetUserAppointmentsAsync(short userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAppointment/GetUserAppointmentsByDate", ReplyAction="http://tempuri.org/IServiceAppointment/GetUserAppointmentsByDateResponse")]
        WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE[] GetUserAppointmentsByDate(short userId, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAppointment/GetUserAppointmentsByDate", ReplyAction="http://tempuri.org/IServiceAppointment/GetUserAppointmentsByDateResponse")]
        System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE[]> GetUserAppointmentsByDateAsync(short userId, System.DateTime date);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceAppointmentChannel : WebClinicManagementLiteAdmin.ProxyAppointment.IServiceAppointment, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceAppointmentClient : System.ServiceModel.ClientBase<WebClinicManagementLiteAdmin.ProxyAppointment.IServiceAppointment>, WebClinicManagementLiteAdmin.ProxyAppointment.IServiceAppointment {
        
        public ServiceAppointmentClient() {
        }
        
        public ServiceAppointmentClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceAppointmentClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceAppointmentClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceAppointmentClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CreateAppointment(WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE objAppointmentBE) {
            return base.Channel.CreateAppointment(objAppointmentBE);
        }
        
        public System.Threading.Tasks.Task<bool> CreateAppointmentAsync(WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE objAppointmentBE) {
            return base.Channel.CreateAppointmentAsync(objAppointmentBE);
        }
        
        public WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE[] GetAllAppointments() {
            return base.Channel.GetAllAppointments();
        }
        
        public System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE[]> GetAllAppointmentsAsync() {
            return base.Channel.GetAllAppointmentsAsync();
        }
        
        public WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE GetOneAppointment(short id) {
            return base.Channel.GetOneAppointment(id);
        }
        
        public System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE> GetOneAppointmentAsync(short id) {
            return base.Channel.GetOneAppointmentAsync(id);
        }
        
        public bool UpdateAppointment(WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE objAppointmentBE) {
            return base.Channel.UpdateAppointment(objAppointmentBE);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAppointmentAsync(WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE objAppointmentBE) {
            return base.Channel.UpdateAppointmentAsync(objAppointmentBE);
        }
        
        public bool DeleteAppointment(short id) {
            return base.Channel.DeleteAppointment(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAppointmentAsync(short id) {
            return base.Channel.DeleteAppointmentAsync(id);
        }
        
        public WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE[] GetPatientAppointments(short patientId) {
            return base.Channel.GetPatientAppointments(patientId);
        }
        
        public System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE[]> GetPatientAppointmentsAsync(short patientId) {
            return base.Channel.GetPatientAppointmentsAsync(patientId);
        }
        
        public WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE[] GetUserAppointments(short userId) {
            return base.Channel.GetUserAppointments(userId);
        }
        
        public System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE[]> GetUserAppointmentsAsync(short userId) {
            return base.Channel.GetUserAppointmentsAsync(userId);
        }
        
        public WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE[] GetUserAppointmentsByDate(short userId, System.DateTime date) {
            return base.Channel.GetUserAppointmentsByDate(userId, date);
        }
        
        public System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyAppointment.AppointmentBE[]> GetUserAppointmentsByDateAsync(short userId, System.DateTime date) {
            return base.Channel.GetUserAppointmentsByDateAsync(userId, date);
        }
    }
}
