//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebClinicManagementLiteAdmin.ProxyPatient {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientBE", Namespace="http://schemas.datacontract.org/2004/07/WCFClinic.Entities")]
    [System.SerializableAttribute()]
    public partial class PatientBE : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BirthdayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DniField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhotoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Birthday {
            get {
                return this.BirthdayField;
            }
            set {
                if ((this.BirthdayField.Equals(value) != true)) {
                    this.BirthdayField = value;
                    this.RaisePropertyChanged("Birthday");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedAt {
            get {
                return this.CreatedAtField;
            }
            set {
                if ((this.CreatedAtField.Equals(value) != true)) {
                    this.CreatedAtField = value;
                    this.RaisePropertyChanged("CreatedAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dni {
            get {
                return this.DniField;
            }
            set {
                if ((object.ReferenceEquals(this.DniField, value) != true)) {
                    this.DniField = value;
                    this.RaisePropertyChanged("Dni");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Photo {
            get {
                return this.PhotoField;
            }
            set {
                if ((object.ReferenceEquals(this.PhotoField, value) != true)) {
                    this.PhotoField = value;
                    this.RaisePropertyChanged("Photo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProxyPatient.IServicePatient")]
    public interface IServicePatient {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePatient/CreatePatient", ReplyAction="http://tempuri.org/IServicePatient/CreatePatientResponse")]
        bool CreatePatient(WebClinicManagementLiteAdmin.ProxyPatient.PatientBE objPatientBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePatient/CreatePatient", ReplyAction="http://tempuri.org/IServicePatient/CreatePatientResponse")]
        System.Threading.Tasks.Task<bool> CreatePatientAsync(WebClinicManagementLiteAdmin.ProxyPatient.PatientBE objPatientBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePatient/GetAllPatients", ReplyAction="http://tempuri.org/IServicePatient/GetAllPatientsResponse")]
        WebClinicManagementLiteAdmin.ProxyPatient.PatientBE[] GetAllPatients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePatient/GetAllPatients", ReplyAction="http://tempuri.org/IServicePatient/GetAllPatientsResponse")]
        System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyPatient.PatientBE[]> GetAllPatientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePatient/GetPatient", ReplyAction="http://tempuri.org/IServicePatient/GetPatientResponse")]
        WebClinicManagementLiteAdmin.ProxyPatient.PatientBE GetPatient(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePatient/GetPatient", ReplyAction="http://tempuri.org/IServicePatient/GetPatientResponse")]
        System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyPatient.PatientBE> GetPatientAsync(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePatient/UpdatePatient", ReplyAction="http://tempuri.org/IServicePatient/UpdatePatientResponse")]
        bool UpdatePatient(WebClinicManagementLiteAdmin.ProxyPatient.PatientBE objPatientBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePatient/UpdatePatient", ReplyAction="http://tempuri.org/IServicePatient/UpdatePatientResponse")]
        System.Threading.Tasks.Task<bool> UpdatePatientAsync(WebClinicManagementLiteAdmin.ProxyPatient.PatientBE objPatientBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePatient/DeletePatient", ReplyAction="http://tempuri.org/IServicePatient/DeletePatientResponse")]
        bool DeletePatient(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePatient/DeletePatient", ReplyAction="http://tempuri.org/IServicePatient/DeletePatientResponse")]
        System.Threading.Tasks.Task<bool> DeletePatientAsync(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePatient/Login", ReplyAction="http://tempuri.org/IServicePatient/LoginResponse")]
        WebClinicManagementLiteAdmin.ProxyPatient.PatientBE Login(string dni, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicePatient/Login", ReplyAction="http://tempuri.org/IServicePatient/LoginResponse")]
        System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyPatient.PatientBE> LoginAsync(string dni, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicePatientChannel : WebClinicManagementLiteAdmin.ProxyPatient.IServicePatient, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicePatientClient : System.ServiceModel.ClientBase<WebClinicManagementLiteAdmin.ProxyPatient.IServicePatient>, WebClinicManagementLiteAdmin.ProxyPatient.IServicePatient {
        
        public ServicePatientClient() {
        }
        
        public ServicePatientClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServicePatientClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicePatientClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicePatientClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CreatePatient(WebClinicManagementLiteAdmin.ProxyPatient.PatientBE objPatientBE) {
            return base.Channel.CreatePatient(objPatientBE);
        }
        
        public System.Threading.Tasks.Task<bool> CreatePatientAsync(WebClinicManagementLiteAdmin.ProxyPatient.PatientBE objPatientBE) {
            return base.Channel.CreatePatientAsync(objPatientBE);
        }
        
        public WebClinicManagementLiteAdmin.ProxyPatient.PatientBE[] GetAllPatients() {
            return base.Channel.GetAllPatients();
        }
        
        public System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyPatient.PatientBE[]> GetAllPatientsAsync() {
            return base.Channel.GetAllPatientsAsync();
        }
        
        public WebClinicManagementLiteAdmin.ProxyPatient.PatientBE GetPatient(short id) {
            return base.Channel.GetPatient(id);
        }
        
        public System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyPatient.PatientBE> GetPatientAsync(short id) {
            return base.Channel.GetPatientAsync(id);
        }
        
        public bool UpdatePatient(WebClinicManagementLiteAdmin.ProxyPatient.PatientBE objPatientBE) {
            return base.Channel.UpdatePatient(objPatientBE);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePatientAsync(WebClinicManagementLiteAdmin.ProxyPatient.PatientBE objPatientBE) {
            return base.Channel.UpdatePatientAsync(objPatientBE);
        }
        
        public bool DeletePatient(short id) {
            return base.Channel.DeletePatient(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePatientAsync(short id) {
            return base.Channel.DeletePatientAsync(id);
        }
        
        public WebClinicManagementLiteAdmin.ProxyPatient.PatientBE Login(string dni, string password) {
            return base.Channel.Login(dni, password);
        }
        
        public System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyPatient.PatientBE> LoginAsync(string dni, string password) {
            return base.Channel.LoginAsync(dni, password);
        }
    }
}
