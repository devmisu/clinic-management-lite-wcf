//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebClinicManagementLiteAdmin.ProxyArea {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AreaBE", Namespace="http://schemas.datacontract.org/2004/07/WCFClinic.Entities")]
    [System.SerializableAttribute()]
    public partial class AreaBE : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedAt {
            get {
                return this.CreatedAtField;
            }
            set {
                if ((this.CreatedAtField.Equals(value) != true)) {
                    this.CreatedAtField = value;
                    this.RaisePropertyChanged("CreatedAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProxyArea.IServiceArea")]
    public interface IServiceArea {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceArea/CreateArea", ReplyAction="http://tempuri.org/IServiceArea/CreateAreaResponse")]
        bool CreateArea(WebClinicManagementLiteAdmin.ProxyArea.AreaBE objAreaBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceArea/CreateArea", ReplyAction="http://tempuri.org/IServiceArea/CreateAreaResponse")]
        System.Threading.Tasks.Task<bool> CreateAreaAsync(WebClinicManagementLiteAdmin.ProxyArea.AreaBE objAreaBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceArea/GetAllAreas", ReplyAction="http://tempuri.org/IServiceArea/GetAllAreasResponse")]
        WebClinicManagementLiteAdmin.ProxyArea.AreaBE[] GetAllAreas();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceArea/GetAllAreas", ReplyAction="http://tempuri.org/IServiceArea/GetAllAreasResponse")]
        System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyArea.AreaBE[]> GetAllAreasAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceArea/GetOneArea", ReplyAction="http://tempuri.org/IServiceArea/GetOneAreaResponse")]
        WebClinicManagementLiteAdmin.ProxyArea.AreaBE GetOneArea(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceArea/GetOneArea", ReplyAction="http://tempuri.org/IServiceArea/GetOneAreaResponse")]
        System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyArea.AreaBE> GetOneAreaAsync(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceArea/UpdateArea", ReplyAction="http://tempuri.org/IServiceArea/UpdateAreaResponse")]
        bool UpdateArea(WebClinicManagementLiteAdmin.ProxyArea.AreaBE objAreaBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceArea/UpdateArea", ReplyAction="http://tempuri.org/IServiceArea/UpdateAreaResponse")]
        System.Threading.Tasks.Task<bool> UpdateAreaAsync(WebClinicManagementLiteAdmin.ProxyArea.AreaBE objAreaBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceArea/DeleteArea", ReplyAction="http://tempuri.org/IServiceArea/DeleteAreaResponse")]
        bool DeleteArea(short id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceArea/DeleteArea", ReplyAction="http://tempuri.org/IServiceArea/DeleteAreaResponse")]
        System.Threading.Tasks.Task<bool> DeleteAreaAsync(short id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceAreaChannel : WebClinicManagementLiteAdmin.ProxyArea.IServiceArea, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceAreaClient : System.ServiceModel.ClientBase<WebClinicManagementLiteAdmin.ProxyArea.IServiceArea>, WebClinicManagementLiteAdmin.ProxyArea.IServiceArea {
        
        public ServiceAreaClient() {
        }
        
        public ServiceAreaClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceAreaClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceAreaClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceAreaClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CreateArea(WebClinicManagementLiteAdmin.ProxyArea.AreaBE objAreaBE) {
            return base.Channel.CreateArea(objAreaBE);
        }
        
        public System.Threading.Tasks.Task<bool> CreateAreaAsync(WebClinicManagementLiteAdmin.ProxyArea.AreaBE objAreaBE) {
            return base.Channel.CreateAreaAsync(objAreaBE);
        }
        
        public WebClinicManagementLiteAdmin.ProxyArea.AreaBE[] GetAllAreas() {
            return base.Channel.GetAllAreas();
        }
        
        public System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyArea.AreaBE[]> GetAllAreasAsync() {
            return base.Channel.GetAllAreasAsync();
        }
        
        public WebClinicManagementLiteAdmin.ProxyArea.AreaBE GetOneArea(short id) {
            return base.Channel.GetOneArea(id);
        }
        
        public System.Threading.Tasks.Task<WebClinicManagementLiteAdmin.ProxyArea.AreaBE> GetOneAreaAsync(short id) {
            return base.Channel.GetOneAreaAsync(id);
        }
        
        public bool UpdateArea(WebClinicManagementLiteAdmin.ProxyArea.AreaBE objAreaBE) {
            return base.Channel.UpdateArea(objAreaBE);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAreaAsync(WebClinicManagementLiteAdmin.ProxyArea.AreaBE objAreaBE) {
            return base.Channel.UpdateAreaAsync(objAreaBE);
        }
        
        public bool DeleteArea(short id) {
            return base.Channel.DeleteArea(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAreaAsync(short id) {
            return base.Channel.DeleteAreaAsync(id);
        }
    }
}
